name: Ubuntu With Live Update

on:
  workflow_dispatch: {}
  # schedule:
  #   - cron: "30 1 * * *"   #7 AM IST
  #   - cron: "30 6 * * *"   #12 PM
  #   - cron: "30 11 * * *"  #5 PM
  #   - cron: "30 16 * * *"  #10 PM
  #upgrade is new code line in line no. 18
jobs:
  run-tailscale:
    runs-on: ubuntu-latest
    timeout-minutes: 4320   # 72 hours
    steps:

      - name: Install Tailscale + jq
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq
          curl -fsSL https://tailscale.com/install.sh | sh

      - name: Enable IP Forwarding
        run: |
          sudo sysctl -w net.ipv4.ip_forward=1
          sudo sysctl -w net.ipv6.conf.all.forwarding=1

      - name: Get Runner Hostname (Unique for Tailscale)
        id: runner_info
        run: |
          BASE_HOSTNAME=$(hostname)
          UNIQUE_HOSTNAME="${BASE_HOSTNAME}-${GITHUB_RUN_ID}"
          echo "runner_hostname=$UNIQUE_HOSTNAME" >> $GITHUB_ENV
          echo "runner_hostname=$UNIQUE_HOSTNAME" >> $GITHUB_OUTPUT

      - name: Start Tailscale Exit Node
        run: |
          sudo tailscale up \
            --authkey ${{ secrets.TAILSCALE_PREAUTHKEY }} \
            --ssh \
            --advertise-exit-node \
            --hostname ${{ steps.runner_info.outputs.runner_hostname }} \
            --reset
        env:
          TS_SOCKET: /tmp/tailscaled.sock

      - name: Save Start Time
        run: |
          START_TIME=$(date +%s)
          echo "START_TIME=$START_TIME" >> $GITHUB_ENV

      - name: Get Tailscale & Public IP
        id: get_ips
        run: |
          TAILSCALE_IP=$(sudo tailscale ip -4)
          PUBLIC_IP=$(curl -s ifconfig.me)
          LOCATION_JSON=$(curl -s http://ip-api.com/json/$PUBLIC_IP)

          CITY=$(echo $LOCATION_JSON | jq -r '.city // "Unknown City"')
          COUNTRY=$(echo $LOCATION_JSON | jq -r '.country // "Unknown Country"')
          CC=$(echo $LOCATION_JSON | jq -r '.countryCode // ""')
          ISP=$(echo $LOCATION_JSON | jq -r '.isp // "Unknown ISP"')

          FLAG=""
          for (( i=0; i<${#CC}; i++ )); do
            c=${CC:i:1}
            code=$(( $(printf '%d' "'$c") - 65 + 0x1F1E6 ))
            FLAG+=$(printf "\\U%08X" $code)
          done
          FLAG=$(echo -e $FLAG)

          echo "TAILSCALE_IP=$TAILSCALE_IP" >> $GITHUB_ENV
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          echo "CITY=$CITY" >> $GITHUB_ENV
          echo "COUNTRY=$COUNTRY" >> $GITHUB_ENV
          echo "FLAG=$FLAG" >> $GITHUB_ENV
          echo "ISP=$ISP" >> $GITHUB_ENV
          echo "ts_ip=$TAILSCALE_IP" >> $GITHUB_OUTPUT
          echo "pub_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

      - name: Again Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg yt-dlp


      - name: Cleanup Exit Node
        if: always()
        run: sudo tailscale down

      - name: Send Telegram Stop Notification
        if: always()
        run: |
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - ${{ env.START_TIME }}))
          HOURS=$(printf "%02d" $((DURATION/3600)))
          MINUTES=$(printf "%02d" $(((DURATION%3600)/60)))
          SECONDS=$(printf "%02d" $((DURATION%60)))

          CC=$(curl -s http://ip-api.com/json/${{ steps.get_ips.outputs.pub_ip }} | jq -r '.countryCode // ""')
          FLAG=""
          for (( i=0; i<${#CC}; i++ )); do
            c=${CC:i:1}
            code=$(( $(printf '%d' "'$c") - 65 + 0x1F1E6 ))
            FLAG+=$(printf "\\U%08X" $code)
          done
          FLAG=$(echo -e $FLAG)

          MSG="🛑 Tailscale Node Stopped%0A🖥️ Runner: ${{ steps.runner_info.outputs.runner_hostname }}%0A🌐 Tailscale IP was: ${{ steps.get_ips.outputs.ts_ip }}%0A🌍 Public IP was: ${{ steps.get_ips.outputs.pub_ip }}%0A📍 Location was: ${{ env.CITY }}, ${{ env.COUNTRY }} $FLAG%0A🏢 ISP: ${{ env.ISP }}%0A⏱️ Active Duration: ${HOURS}:${MINUTES}:${SECONDS}"

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.BOT_TOKEN }}/sendMessage" \
            -d chat_id=${{ secrets.LEECH_DUMP_CHAT }} \
            -d text="$MSG"

      - name: Keep Alive
        run: |
          while true; do
            echo "⏳ Workflow is alive... $(date)"
            sleep 300
          done
